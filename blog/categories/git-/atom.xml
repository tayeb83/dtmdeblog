<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git, | مدونة الطيب الضادي]]></title>
  <link href="http://tayeb83.github.com/dtmdeblog/blog/categories/git-/atom.xml" rel="self"/>
  <link href="http://tayeb83.github.com/dtmdeblog/"/>
  <updated>2015-07-21T23:17:11+02:00</updated>
  <id>http://tayeb83.github.com/dtmdeblog/</id>
  <author>
    <name><![CDATA[طيب مرابطي]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[التكملة التلقائية للgit ]]></title>
    <link href="http://tayeb83.github.com/dtmdeblog/blog/2013/03/20/git-automcompletion/"/>
    <updated>2013-03-20T09:29:00+01:00</updated>
    <id>http://tayeb83.github.com/dtmdeblog/blog/2013/03/20/git-automcompletion</id>
    <content type="html"><![CDATA[<p>في هذا المقال سأشرح  لكم الطريقة التي يمكنكم من خلالها الاستفادة من التكملة التلقائية لأوامر الgit داخل الbash أو مفسر سطر الأوامر.</p>

<!-- more -->


<p>أول شيئ يجب القيام به هو تحميل السكريبت : <code>git-completion.bash</code> و حفظه داخل المجلد البيت الخاص بكم كالتالي :
 <div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>تحميل السكريبت داخل الملف الخاص   </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>curl https://raw.github.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>بعدها يجب إضافة الأسطر التالية داخل ملف bash_profile. الموجود داخل المجلد البيت الخاص بكم، هذه الأسطر تُعلم الbash بتنفيذ السكريبت الخاص بالتكملة التلقائية إذا وجد :</p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/gitautocompletion/linesaddedtoscript.png" title="اضافة الأسطر التالية للbash_profile"/></p>

<p>الأن ماعليكم فعله الا فتح الbash و البدأ في كتابة أمر git و التكملة باستعمال الTAB، كماماهو موضح في الصورة :</p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/gitautocompletion/gitexamplecommand.png" title="مثال لتكملة تلقائية لgit"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[بالفيديو كيفية تقاسم المستودعات باستعمال الgithub]]></title>
    <link href="http://tayeb83.github.com/dtmdeblog/blog/2013/02/22/git-and-github-vid3/"/>
    <updated>2013-02-22T23:02:00+01:00</updated>
    <id>http://tayeb83.github.com/dtmdeblog/blog/2013/02/22/git-and-github-vid3</id>
    <content type="html"><![CDATA[<p> هذا المقال عبارة  عن تكملة لما بدأته مسبقا حول الgit بالفيديو. الدرس الثالث يشرح  لكم كيفية  تقاسم المستودعات باستعمال خدمة الgithub.</p>

<p>أتمنى أن الدرس سيفيدكم و أنا في الخدمة من أجل مناقشة الدرس أو تحسينه في المستقبل.</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/rIZZ2YZdZew "></iframe></div></p>

<p>و ملف الدرس قمت بتقاسمه في هذا الرابط</p>

<p><a href="http://fr.slideshare.net/tayebmerabti/github-16704980">ملف الدرس </a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ التهيئة  والرجوع إلى الوراء في الgit بالفيديو]]></title>
    <link href="http://tayeb83.github.com/dtmdeblog/blog/2013/02/21/git-staged-and-reset-vid2/"/>
    <updated>2013-02-21T00:28:00+01:00</updated>
    <id>http://tayeb83.github.com/dtmdeblog/blog/2013/02/21/git-staged-and-reset-vid2</id>
    <content type="html"><![CDATA[<p>هذا المقال عبارة  عن تكملة لما بدأته مسبقا حول الgit بالفيديو. الدرس الثاني عبارة عن عرض لأهم الأوامر التس تساعد في التحكم بتهيئة الملفات و حفظها و كيفية  الغاءها و الرجوع إلى الوراء في حالة الخطأ أو لمجرد التغيير.</p>

<p>أتمنى أن الدرس سيفيدكم و أنا في الخدمة من أجل مناقشة الدرس أو تحسينه في المستقبل.</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/X-yqXZzd-YQ "></iframe></div></p>

<p>و ملف الدرس قمت بتقاسمه في هذا الرابط</p>

<p><a href="http://fr.slideshare.net/tayebmerabti/git-cours-2-pdf">ملف الدرس </a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[إدارة الإصدارات-github]]></title>
    <link href="http://tayeb83.github.com/dtmdeblog/blog/2012/09/23/github/"/>
    <updated>2012-09-23T12:44:00+02:00</updated>
    <id>http://tayeb83.github.com/dtmdeblog/blog/2012/09/23/github</id>
    <content type="html"><![CDATA[<p>الآن و قد قمنا بوضع مشروعنا تحت منصة إدارة الإصدارات, حان الوقت ل"تحميل" البرنامج نحو
 <a href="https://github.com">https://github.com</a>  و الذي هو عبارة عن موقع إجتماعي مهيأ و مطور من أجل إستقبال و تقاسم المستودعات من نوع الGIT.
وضع نسخة من مستودعكم في الgithub له هدفان :</p>

<ol>
<li>حفظ كامل لكل المشروع (بالإضافة إلى جميع المستودعات التي تم إنشاءها)</li>
<li>تسهيل التبادل و التقاسم مع مطورين أخرين لنفس المشروع أو لنسخ مشاريع نريد إنشاء مثلها و العمل عليها, هذه النقطة تعتبر ثانوية و لكن كونكم عضو في الgithub يمنحكم لكم صلاحية للإطلاع على العديد من المشاريع المطورة بلغتكم المفضلة و من بينها Ruby, مع العلم أن موقع الgithub طُور عن طريق منصة Ruby On Rails.</li>
</ol>


<p>يحتوي الgithub على العديد من الصيغ الغير مجانية ولكن من أجل البرامج المفتوحة المصادر فإنه يقترح خدمات مجانية, و لهذا فإن ما يجب فعله أولا هو التسجيل على الموقع من أجل الحصول على حساب مجاني, ثم الضغط على الرابط (new repository) من أجل تسجيل و إنشاء مستودع جديد, بعدها لم يتبقى إلا إتمام معلومات الإستمارة كما هو موضح في الصورة</p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/githubNew.png" title="github إنشاء مستودع جديد على"/>
 و من ثم تحميل المشروع عن طريق إرساله إلى المستودع البعيد كالتالي :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote add origin git@github.com:&lt;username>/project_name.git $
</span><span class='line'>git push origin master $</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
بحيث أن : username تمثل إسم المستحدم و project_name إسم المشروع.</p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/resultsFirstCommands.png" title="github المشروع على"/></p>

<h2> الفروع أو الفرع Branch</h2>

<p>الGIT عبارة عن أداة رائعة من أجل إنشاء "الفروع" و التي هي عبارة عن نسخ للمستودعات التي نقوم بالعمل عليها دون تغيير الملف الرئيسي. في جميع الحالات, المستودع الرئيسي هو الفرع "master" و يمكننا أن نقوم من خلاله بإنشاء فرع جديد عن طريق الأمر checkout و العَلم b- :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -b modify-README $
</span><span class='line'>git branch $</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>في هذه الحالة, الأمر الثاني يقوم بعرض كل الفروع المحلية, و النجمة تحدد الفرع الذي نحن بصدد العمل عليه, لاحظتم أن git checkout -b تقوم من جهة بإنشاء فرع جديد و من جهة بتغيير الفرع الذي تم إنشاءه.
فائدة الفروع لا تتجلى إلا عند العمل جماعة على نفس المشروع.</p>

<h2> التغيير Edit</h2>

<p>بعد إنشاء الفرع نقوم بتعديله, تعتبر الmarkdown لغة جيدة من أجل القيام بالتغييرات على الملفات في الgithub. على سبيل المثال سوف نقوم بتغيير الملف README, من أجل هذا نقوم بتحويله إلى ملف markdown عن طريق اﻷمر :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git mv README README.markdown $
</span><span class='line'>gedit   README.markdown $</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
و منها نقوم بالتغيير في الملف ثم تطبيق التغييرات كما هو موضح في الصورة.
<img src="http://tayeb83.github.com/dtmdeblog/images/README_Markdown.png" title="بعد تحويله و تغييره README الملف "/></p>

<h2> الإدماج Merge</h2>

<p>الأن و بعد إتمام التغييرات, نقوم بدمج النتيجة إلى الفرع الرئيسي عن طريق اﻷمر :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout master $
</span><span class='line'>git merge modify-README $</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2> التحميل Push</h2>

<p>لم يتبقى الأن إلى تحميل التغيرات على الgithub من أجل رؤية النتائج كما توضح الصورة :</p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/READMEONGITHUB.png" title=" githubبعد تغييره على ال README الملف  "/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ إدارة الإصدارات-تثبيث و إعداد ]]></title>
    <link href="http://tayeb83.github.com/dtmdeblog/blog/2012/07/08/gitinstallpart2/"/>
    <updated>2012-07-08T08:43:00+02:00</updated>
    <id>http://tayeb83.github.com/dtmdeblog/blog/2012/07/08/gitinstallpart2</id>
    <content type="html"><![CDATA[<p>لتثبيث الGIT أنصحكم بتتبع الخطوات المشروحة بطريقة جيدة و مفصلة حسب نوع النظام على الرابط
 <a href="http://git-scm.com/book/en/Getting-Started-Installing-Git">http://git-scm.com/book/en/Getting-Started-Installing-Git</a>  , على سبيل المثال تثبيث الGIT على نظام الأبونتو يتم بالأمر التالي :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install git-core $</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>بعد تثبيث الGIT, تأتي المرحلة التالية و التي نقوم فيها بتهيئة الإعدادات و هي عبارة عن إعدادات خاصة بالنظام أي أنكم لن تنفذوها إلا مرة واحدة على نفس النظام :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git-config --global user.name "الإسم" $
</span><span class='line'>git-config --global user.email "البريد الإلكتروني" $</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>تهيئة الإعدادات لل repository (المستودع)</h2>

<p>تشمل هذه المرحلة مجموعة من العمليات الضرورية لتشكيل الrepository, و الذي هو عبارة عن "ملف أو نظام تحكم" تُوضع فيه الإصدارات الخاصة بالتطبيق :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git init $</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>بعدها يجب إضافة الملفات داخل الrepository, ولكن يكمن هنا مشكل بسيط و هو أن الGIT يتبع التغيرات التي تطرأ على كل الملفات حتى تلك التي لا نريد تتبعها, أخص بالذكر ملفات الlog على سبيل المثال وذلك أن هذه الملفات تتغير بكثرة و لسنا بحاجة لأن يقوم نظام إدارة الإصدارات بتتبع تغيراتها. لحسن الحظ فإن الGIT لديه القدرة على تجاهل مثل هذه الملفات و ذلك بالطريقة التالية :
نضف إلى الملف الرئيسي للتطبيق ملف إسمه gitignore. و الذي سوف يحتوي على بعض القواعد تحدد لGIT الملفات التي يجب تجاهلها, اﻵن لو عدنا إلى الدرس   <a href="http://tayeb83.github.com/dtmdeblog/blog/2012/06/25/first-application-rails">أول تطبيق برايلز</a>  فسوف تلاحظون أن رايلز قام بإنشاء ملف gitignore. داخل الملف الرئيسي مثل ما توضحه الصورة :</p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/gitginoreinapplication.png" title="ملف gitignore. داخل الملف الرئيسي"/></p>

<p>اﻵن لو فتحنا gitignore. فسوف تلاحظون أن الملف يحتوي على مجموعة من القواعد تجبر الGIT على تجاهل التغيرات التي تطرأ على ملفات الlog, الملفات المؤقتة و قاعدة البيانات sqllite.</p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/gitigorefile.png" title=" محتوى ملف gitignore."/></p>

<h2>الإضافة و الحفظ</h2>

<p>و أخير وصلنا إلى المرحلة التي سوف نقوم من خلالها إضافة ملفات التطبيق إلى الGIT ثم حفظها (commit), يمكنكم إضافة كل الملفات (ماعدا التي تمت تجاهلها) بالطريقة التالية :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>. git add  $</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>النقطة (.) هنا تمثل الملف الجاري و الGIT ذكي بما فيه الكفاية لكي يقوم بإضافة كل الملفات بطريقة الإستدعاء الذاتي. هذه العملية تقوم بإضافة الملفات إلى "ساحة التخزين" (staging area) و التي تحتوي على التغيرات المؤقتة على المشروع. يمكنكم رؤيتها عن طريق تنفيذ الأمر "git status"  كما هو موضح في الصورة :</p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/gitstatus.png"/></p>

<p>اﻵن إذا أردتم حفظ هذه التغيرات و تأكيدها فيجب إستعمال الأمر "commit -m" بحيث أن الخاصية "m-" تسمح لكم بإضافة تعليق يوضح مثلا سبب التغيير.</p>

<h2>ماذا يستطيع الGIT القيام به من أجل مساعدتكم</h2>

<p>بعد كل ما قمنا به في هذا الدرس أعتقد أن الفائدة من إستعمال الGIT لم تظهر بعد, لهذا دعونا نقوم بعمل تطبيقي يوضح لنا الأمور أكثر. أول شيء سوف نقوم به هو تدمير الملف app/controllers, عملية يمكن أن يقوم بها أي مطور بطريق الخطأ.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd first_app/ $
</span><span class='line'> rm -rf app/controllers $</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>لمعرفة ما حصل سوف نفوم بإرسال الأمر "git status".</p>

<p><img src="http://tayeb83.github.com/dtmdeblog/images/gitstatusrmrfcontrollers.png"/></p>

<p>الصورة توضح التغيرات التي حصلت ولكن ما يجب معرفته أن هذه التغيرات لم تحفظ بعد على الGIT و بالتالي فإن بإمكاننا إلغاءها بطريقة سهلة و ربط الGIT مع الإصدار اﻷخير عن طريق تنفيذ اﻷمر  "git chekout -f".</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -f $
</span><span class='line'>git status $&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>On branch master&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>nothing to commit (working directory clean)
</span><span class='line'>ls app/controllers/ $
</span><span class='line'>application_controller.rb</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>الحمد لله الملف المحذوف عاد مجددا.</p>
]]></content>
  </entry>
  
</feed>
