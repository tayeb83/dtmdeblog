<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: activerecord, | مدونة الطيب الضادي]]></title>
  <link href="http://tayeb83.github.com/dtmdeblog/blog/categories/activerecord-/atom.xml" rel="self"/>
  <link href="http://tayeb83.github.com/dtmdeblog/"/>
  <updated>2015-07-21T21:06:38+02:00</updated>
  <id>http://tayeb83.github.com/dtmdeblog/</id>
  <author>
    <name><![CDATA[طيب مرابطي]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ مدخل إلى  Activerecord: العلاقات]]></title>
    <link href="http://tayeb83.github.com/dtmdeblog/blog/2012/12/30/activerecord-part2/"/>
    <updated>2012-12-30T22:49:00+01:00</updated>
    <id>http://tayeb83.github.com/dtmdeblog/blog/2012/12/30/activerecord-part2</id>
    <content type="html"><![CDATA[<p>قاعدة بيانات علائقية بدون تبادل مرجعي (cross-referencing) بين الجداول  لا يعني الشيء الكثير. في مثال الجزء الأول المقال داخل المدونة (Post) يمكن أن يحوي على أكثر من تعليق أو لا يحوي أي تعليق. التعليق و الذي سيُمثل بجدول في قاعدة البيانات يحتوي على عمود (post_id) يُمكن من خلاله ربط التعليق بالمقال. الActiverecord يرعى هذه العلاقات بالنسبة لنا ويجعلها شفافة لحد كبير و لدرجة أننا لن نحتاج إلى لمس الSQL.
هناك مجموعة من العلاقات يستطيع الActiverecord إدارتها من بينها :</p>

<h2>belongs_to : </h2>

<p>تعتبر العلاقة الأكثر إستعمالا في قاعدة البيانات. قولنا بأن النوع أ ينتمي إلى النوع ب هذا يعني أن النوع أ يحتوي على عمود ID مرجعي للنوع ب. مثال ذلك، أنه داخل المدونة الPost يحتوي على أكثر من تعليق (Comments) أي بمعنى أخر أن التعليق ينتمي لPost واحد فهذا يعني أن الجدول الذي يمثل الComment سوف يحتوي على العمود Post_Id والذي يُشير إلى الPost الذي يحوي التعليق. النتيجة أنه إذا كان لك كائن يُمثل تعليقا من التعليقات (c)  فإنه بإمكاننا إستخراج الPost الموافق عن طريق الأمر : c.Post و النتيجة أيضا أن حذف الPost يعني مباشرة حذف التعليقات التي تنتمي إليه.</p>

<h2>has_many : </h2>

<p>تُعبر العلاقة عن الطرف الأخر للعلاقة belongs_to. في المثال السابق كان بإمكاننا القول : التعليق ينتمي إلى مقال (belongs_to) أو المقال له مجموعة من التعليقات (has_many). المقال لا يحتفظ بجدول يحتوي على التعليقات التي تنتمي إليه، ولكن بكل بساطة يستعلم داخل جدول التعليقات و يستخرج تلك التي تتعلق به. فمثلا من أجل المقال p التعليقات الخاصة به ستُحفظ داخل جدول عن طريق الأمر : p.comments.</p>

<h2>has_one : </h2>

<p>هذه العلاقة تشبه إلى حد كبير العلاقة has_many، باستثناء أن العلاقة تربط بين كائنين فقط أي علاقة واحد-واحد. فمثلا داخل تطبيق،  المستعمل له حساب واحد و واحد فقط في هذه الحالة نموذج المستعمل سيربط بالنموذج الخاص بالحساب بواسطة العلاقة has_one. وبالتالي العلاقة تفرض وحدانية الحساب الخاص بكل مستعمل أي أنه إذا أردنا مثلا إضافة
حساب آخر فهذا خطأ.</p>

<h2>has_many :through Association :</h2>

<p> تستعمل هذه العلاقة لإعداد العلاقة مجموعة إلى مجموعة (many to many) بواسطة نموذج وسط. العلاقة تشير إلى أن النموذج المعلن يمكن ربطه مع صفر أو أكثر من حالة لنموذج ثاني بواسطة نموذج ثالث وسط. لنفرض مثلا أننا نريد معرفة ثمن الحليب الذي يبيعه المربي لبائعي التجزئة. الأمر كان سهلا لو كان الثمن ثابت بحيث أنه كان بإمكاننا جعل ثمن الحليب عبارة عن عمود داخل الجدول الخاص بالمربي فقط  ولكن هذا غير صحيح لأن الثمن غير ثابت و يختلف باختلاف بائعي التجزئة أو لأن البائع يشتري الحليب بأثمان مختلفة باختلاف المربين، في هذه الحالة يمكننا استعمال العلاقة    has_many :through ، لأنه يجب تعريف نموذج وسط بين البائع و المربي يعبر عن عملية التوزيع DISTRIBUTION.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;br/>
</span><span class='line'>class Reseller &lt; ActiveRecord::Base
</span><span class='line'>  has_many :distributions
</span><span class='line'>  has_many :farmers, :through => :distributions
</span><span class='line'>end
</span><span class='line'>class Distributions &lt; ActiveRecord::Base  &lt;br/>
</span><span class='line'>  belongs_to :reseller
</span><span class='line'>  belongs_to :farmer
</span><span class='line'>end
</span><span class='line'>class Farmer &lt; ActiveRecord::Base
</span><span class='line'>  has_many :distributions
</span><span class='line'>  has_many :resellers, :through => :distributions
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>  has_and_belong_to_many : </h2>

<p>هذه العلاقة تُعتبر مُعقدة نوع ما. المثال التقليدي هو "الوسمات". بمعنى أن المقال له مجموعة من الوسمات و الوسام يمكن أن ينتمي إلى مجموعة مقالات مختلفة، أي أن العلاقة  هي has_many بين الوسام و المقال بدون نموذج وسط.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ مدخل إلى Activerecord : CRUD]]></title>
    <link href="http://tayeb83.github.com/dtmdeblog/blog/2012/12/30/activerecord-part1/"/>
    <updated>2012-12-30T22:49:00+01:00</updated>
    <id>http://tayeb83.github.com/dtmdeblog/blog/2012/12/30/activerecord-part1</id>
    <content type="html"><![CDATA[<p>الActiverecord يُمثل الطبقة المسؤولة عن تمثيل البيانات في رايلز. الActiverecord عرفه ووصفه  مارتن فولر في كتابه "Patterns of Enterprise Application Architecture". في الActiverecord، الكائنات (objects) توفر الحفظ الدائم للبيانات و كذلك التغيرات التي تطرأ على هذه البيانات.<br/>
 الActiveRecord يُسهل إنشاء و إستعمال كائنات الأعمال  التي  تتطلب بيانات التخزين الثابتة من خلال قاعدة البيانات. إنه يُمثل نمط تصميم Activerecord  والذي بدوره يصف نظام مخطط الكائن العلائقية ( object-relational mapping ) أو الORM، هذا الأخير عبارة عن تقنية تسمح بإيجاد علاقة بين الكائنات   داخل تطبيق و جداول أنظمة تسيير قواعد البيانات. عمليا هذا يعني إستعمال الActiverecord لإنشاء و إستخراج البيانات بواسطة طرق وسِمات Ruby من دون الحاجة لاستعمال ال SQL بطريقة مباشرة. على سبيل المثال :
لنفرض أن تطبيقنا عبارة عن مدونة مكونة من مجموعة مقالات (يحتوي على نموذج نسميه Post) ونريد المقال</p>

<p>الأول، الطلب sql هو التالي :
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT *  FROM posts ORDER BY date DESC LIMIT 1</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p> باستعمال ال Activerecord الطلب يكون بالطريقة التالية و البسيطة :
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>p = Post.last</span></code></pre></td></tr></table></div></figure></notextile></div>
تلاحظون أن إستعمال الActiverecord يسهل عليكم التعامل مع البيانات و جعل الsql شفاف إلى حد كبير، في المثال السابق يمكنكم بكل بساطة إضافة عنوان بواسطة إستعمال الطريقة p.title بالطريقة التالية مثلا :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>p.title = "dtmdeblog post"</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>CRUD :</h2>

<p>CRUD هو مُختصر ل "CREATE, READ, UPDATE, DELETE" : العمليات الأربعة الأساسية داخل قاعدة البيانات. الActiveRecord يوفر كل هذه العمليات الأساسية بحيث أن كل عملية تتم مُعالجتها من قبل Ruby API  إصطلاحية للغاية  (idiomatic) :</p>

<h2>CREATE : </h2>

<p>لإنشاء كائن ActiveRecord و من تم تجسيد الإنشاء. على سيبل المثال : لو قمنا بإنشاء نموذج للمدونة إسمه  Post داخل التطبيق، فإن إنشاء مقال يكون عن طريق كتابة الأمر : Post.new أو إذا أردنا إدخال كل
أو بعض الأوصاف للكائن يمكننا إستعمال الأمر create كالتالي :
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Post.create (title:”dtmdeblog post 1”, date:Time.now)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>READ :</h2>

<p>تشير إلى استخراج البيانات من قاعدة البيانات. Activerecord يُوفر مجموعة من الطرق كاملة على شكل أسئلة باللغة الإنجليزية مثل : Post.last أو Post.first.</p>

<h2>UPDATE :</h2>

<p>التحديث عبارة عن عملية من عمليات القراءة (read) لكائن معين من قاعدة البيانات و من بعدها تبديل وصف أو مجموعة من الصفات ثم حفظ التغيير، على سبيل المثال، إذا أردنا تحديث المقال الذي يحمل العنوان "المقال الضادي" فإننا نقوم بإستخراج المقال المناسب بواسطة الطريقة :
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>p = Post.find_by_title(“dtmdeblog post 1”)</span></code></pre></td></tr></table></div></figure></notextile></div>
المقال الآن محفوظ داخل الكائن p. بعدها نقوم بتغيير العنوان كما لو أردنا إدخال عنوان جديد :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>p.title = “dtmdeblog post new title”</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>و في الأخير لم يتبقى لنا سوى حفظ الكائن :  p.save</p>

<h2>DELETE :</h2>

<p>هذا الفعل يُستعمل من أجل حذف الكائن و الذي يقوم بحذف سطر من داخل قاعدة البيانات بواسطة الأمر : DELETE.</p>

<p>في الجزء الثاني من المقال  إن شاء الله سأقوم بشرح العلاقات التي يمكن إنشاءها بين الكائنات و كيف يُمكن  إدارتها بالActiverecord</p>
]]></content>
  </entry>
  
</feed>
